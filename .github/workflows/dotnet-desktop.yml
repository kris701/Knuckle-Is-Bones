# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Publish
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Compile project as publish files (WINDOWS)
        run: dotnet publish .\Knuckle.Is.Bones.OpenGL\Knuckle.Is.Bones.OpenGL.csproj --configuration Release /p:PublishProfile="windows.pubxml"

      - name: Compile project as publish files (LINUX)
        run: dotnet publish .\Knuckle.Is.Bones.OpenGL\Knuckle.Is.Bones.OpenGL.csproj --configuration Release /p:PublishProfile="linux.pubxml"

      - name: Compile .ISS to .EXE Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: inno.iss
          options: /O+

      - name: Get Package version
        id: get-version
        uses: kzrnm/get-net-sdk-project-versions-action@v1
        with:
          proj-path: .\Knuckle.Is.Bones.OpenGL\Knuckle.Is.Bones.OpenGL.csproj

      - name: Generate tag
        continue-on-error: true
        uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: "v${{ steps.get-version.outputs.package-version }}"
          message: "Latest release"

      - name: Compress build files (WINDOWS)
        uses: vimtor/action-zip@v1.2
        with:
          files: Output/net8.0/win-x64/publish/
          dest: windows.zip

      - name: Compress build files (LINUX)
        uses: vimtor/action-zip@v1.2
        with:
          files: Output/net8.0/linux-x64/publish/
          dest: linux.zip

      - name: Generate Release
        uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: true
          artifacts: "Output/KnuckleIsBonesSetup.exe;Output/net8.0/linux-x64/publish/*.zip;Output/net8.0/win-x64/publish/*.zip"
          tag: "v${{ steps.get-version.outputs.package-version }}"
